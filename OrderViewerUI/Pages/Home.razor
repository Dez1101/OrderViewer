@page "/"

@using OrderViewerUI.Models
@using OrderViewerUI.Services
@inject OrderService OrderService

<div class="container-fluid py-4">
    <!-- Filter Form -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-info text-white">
            <h5 class="mb-0">Filter Orders</h5>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-3">
                    <label class="form-label">Start Date</label>
                    <input type="date" class="form-control" @bind="filter.StartDate" />
                </div>
                <div class="col-md-3">
                    <label class="form-label">End Date</label>
                    <input type="date" class="form-control" @bind="filter.EndDate" />
                </div>
                <div class="col-md-3">
                    <label class="form-label">Status</label>
                    <select class="form-select" @bind="selectedStatus">
                        <option value="">All Statuses</option>
                        <option value="Pending">Pending</option>
                        <option value="Processing">Processing</option>
                        <option value="Shipped">Shipped</option>
                        <option value="Cancelled">Cancelled</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Min Total</label>
                    <input type="number" class="form-control" @bind="filter.MinTotal" placeholder="0" />
                </div>
                <div class="col-md-3">
                    <label class="form-label">Max Total</label>
                    <input type="number" class="form-control" @bind="filter.MaxTotal" placeholder="10000" />
                </div>
                <div class="col-md-3 d-flex align-items-end">
                    <button class="btn btn-primary w-100" @onclick="ApplyFilter">Apply Filter</button>
                </div>
            </div>
        </div>
    </div>

    @if (orders == null)
    {
        <div class="alert alert-info" role="alert">Loading...</div>
    }
    else
    {
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Found <strong>@orders.Count</strong> orders | Total: <strong>@orders.Sum(o => o.Total).ToString("C")</strong></h5>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive" style="max-height: 400px;">
                    <table class="table table-hover table-striped mb-0">
                        <thead class="bg-light sticky-top">
                            <tr>
                                <th scope="col">ID</th>
                                <th scope="col">Customer</th>
                                <th scope="col">Status</th>
                                <th scope="col">Total</th>
                                <th scope="col">Created</th>
                                <th scope="col">Paid</th>
                                <th scope="col">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var order in orders)
                            {
                                <tr @onclick="() => LoadDetails(order.Id)" style="cursor:pointer">
                                    <td>@order.Id.ToString().Substring(0, 6)</td>
                                    <td>@order.CustomerName</td>
                                    <td>
                                        <span class="badge
                                            @(order.Status == "Pending" ? "bg-warning" :
                                              order.Status == "Processing" ? "bg-info" :
                                              order.Status == "Shipped" ? "bg-success" :
                                              "bg-danger")">
                                            @order.Status
                                        </span>
                                    </td>
                                    <td>@order.Total.ToString("C")</td>
                                    <td>@order.CreatedDate.ToShortDateString()</td>
                                    <td>@(order.IsPaid ? "Yes" : "No")</td>
                                    <td>
                                        @if (!order.IsPaid)
                                        {
                                            <button class="btn btn-sm btn-success" @onclick:stopPropagation="true" @onclick="() => MarkPaid(order.Id)">Mark Paid</button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }

    @if (selectedOrder != null)
    {
        <div class="card shadow-sm">
            <div class="card-header bg-secondary text-white">
                <h4 class="mb-0">Order Details</h4>
            </div>
            <div class="card-body">
                <ul class="list-group list-group-flush">
                    @foreach (var item in selectedOrder.Items)
                    {
                        <li class="list-group-item">@item.ProductName x @item.Quantity (@item.Price.ToString("C"))</li>
                    }
                </ul>
            </div>
        </div>
    }
</div>

@code {
    private List<OrderDto>? orders;
    private OrderDetailsDto? selectedOrder;
    private FilterOrdersDto filter = new FilterOrdersDto
        {
            StartDate = DateTime.Today.AddMonths(-1),
            EndDate = DateTime.Today,
            Statuses = new[] { "Pending", "Processing", "Shipped", "Cancelled" },
            MinTotal = 0,
            MaxTotal = 10000
        };
    private string selectedStatus = "";

    protected override async Task OnInitializedAsync()
    {
        await ApplyFilter();
    }

    private async Task ApplyFilter()
    {
        // Set Statuses based on selectedStatus
        filter.Statuses = string.IsNullOrEmpty(selectedStatus)
            ? new[] { "Pending", "Processing", "Shipped", "Cancelled" }
            : new[] { selectedStatus };

        orders = await OrderService.GetOrdersAsync(filter);
        StateHasChanged();
    }

    private async Task LoadDetails(Guid id)
    {
        selectedOrder = await OrderService.GetOrderDetailsAsync(id);
    }

    private async Task MarkPaid(Guid id)
    {
        var ok = await OrderService.MarkAsPaidAsync(id);
        if (ok)
        {
            var order = orders?.FirstOrDefault(o => o.Id == id);
            if (order != null) order.IsPaid = true;
            StateHasChanged();
        }
    }
}

