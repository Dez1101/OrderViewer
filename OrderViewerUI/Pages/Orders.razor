@page "/orders"
@using OrderViewerUI.Models
@using OrderViewerUI.Services
@inject OrderService OrderService

<div class="container-fluid py-4">
    <h2 class="mb-4">Orders</h2>

    @if (orders == null)
    {
        <div class="alert alert-info" role="alert">Loading...</div>
    }
    else
    {
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Found <strong>@orders.Count</strong> orders | Total: <strong>@orders.Sum(o => o.Total).ToString("C")</strong></h5>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive" style="max-height: 400px;">
                    <table class="table table-hover table-striped mb-0">
                        <thead class="bg-light sticky-top">
                            <tr>
                                <th scope="col">ID</th>
                                <th scope="col">Customer</th>
                                <th scope="col">Status</th>
                                <th scope="col">Total</th>
                                <th scope="col">Created</th>
                                <th scope="col">Paid</th>
                                <th scope="col">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var order in orders)
                            {
                                <tr @onclick="() => LoadDetails(order.Id)" style="cursor:pointer">
                                    <td>@order.Id.ToString().Substring(0, 6)</td>
                                    <td>@order.CustomerName</td>
                                    <td>
                                        <span class="badge
                                            @(order.Status == "Pending" ? "bg-warning" :
                                              order.Status == "Processing" ? "bg-info" :
                                              order.Status == "Shipped" ? "bg-success" :
                                              "bg-danger")">
                                            @order.Status
                                        </span>
                                    </td>
                                    <td>@order.Total.ToString("C")</td>
                                    <td>@order.CreatedDate.ToShortDateString()</td>
                                    <td>@(order.IsPaid ? "Yes" : "No")</td>
                                    <td>
                                        @if (!order.IsPaid)
                                        {
                                            <button class="btn btn-sm btn-success" @onclick:stopPropagation="true" @onclick="() => MarkPaid(order.Id)">Mark Paid</button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }

    @if (selectedOrder != null)
    {
        <div class="card shadow-sm">
            <div class="card-header bg-secondary text-white">
                <h4 class="mb-0">Order Details</h4>
            </div>
            <div class="card-body">
                <ul class="list-group list-group-flush">
                    @foreach (var item in selectedOrder.Items)
                    {
                        <li class="list-group-item">@item.ProductName x @item.Quantity (@item.Price.ToString("C"))</li>
                    }
                </ul>
            </div>
        </div>
    }
</div>

@code {
    private List<OrderDto>? orders;
    private OrderDetailsDto? selectedOrder;

    protected override async Task OnInitializedAsync()
    {
        var filter = new FilterOrdersDto
            {
                Statuses = new[] { "Pending", "Processing", "Shipped", "Cancelled" }
            };
        orders = await OrderService.GetOrdersAsync(filter);
    }

    private async Task LoadDetails(Guid id)
    {
        selectedOrder = await OrderService.GetOrderDetailsAsync(id);
    }

    private async Task MarkPaid(Guid id)
    {
        var ok = await OrderService.MarkAsPaidAsync(id);
        if (ok)
        {
            var order = orders?.FirstOrDefault(o => o.Id == id);
            if (order != null) order.IsPaid = true;
            StateHasChanged();
        }
    }
}